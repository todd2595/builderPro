***GET LETTERS*** [1]
starts with
ends with
the _ letter  "3rd"
how many vowels
how many letters?


**background INFO** [CLUE]
origin/time created
rhymes with??
part of speech


**CLUES**
words described by / describes
words that have similar meaning

#def(risk) - will look up 4 words and display all of them..could throw you off!


**FUN**
words that usally come before or after?




start with 100 points..
minus one point every 2 seconds.
physical = minus 2
meaning = minus 5


  API.saveWord({
    title: "Little"
  })
  .then(console.log("LL"))
  .catch(err => console.log(err));

  API.getWords().then(res => console.log(res))



          {/* /* {this.state.search.length ? (
          this.state.categories.map(topic => (
            <ActionButton
              key={this.state.categories.toString()}>
            </ActionButton>

          ))

        ) : (
            <h2>Nothing</h2>
          )} */ 


          API.InsNoun(query).then((response) => {
          let categories = (response.data.slice(0, 6))
          this.setState({
            categories: categories
          })})

          
    // API.Thesaurus(query).then((res) => {res.data[0].fl && res.data[0].meta ? this.setState({ speech: res.data[0].fl, syns:res.data[0].meta.syns, ants: res.data[0].meta.ants )} : console.log("fail"))}

    // this.setState{(
    //   syns: res.data[0].meta.syns
    // )}
    // 
    // res.data[0].shortdef ? console.log("y00o") : console.log("no class res"))
    //  defnote ? 
    //   // this.setState({ speech: res.data[0].fl }).then(this.GetHelp(res.data[0].fl, query))
    //  console.log("yes") : console.log("no class res"))
    // .then(res.data[0].meta.syns ? this.setState({ syns: res.data[0].meta.syns }) : console.log("no class res"))
    // .then(res.data[0].meta.ants ? this.setState({ ants: res.data[0].meta.ants }) : console.log("no class res"))
    // )
      //   this.setState({
      //   sup: res.data[0],
      //   date: res.data[0].date
      // 
   passport.use(new LocalStrategy(
        function(username, password, done) {
          User.findOne({ username: username }, function (err, user) {
            if (err) { return done(err); }
            if (!user) { return done(null, false); }
            if (!user.verifyPassword(password)) { return done(null, false); }
            return done(null, user);
          });
        }
      ));

      
            

 <>
 <div class="jumbotron jumbotron-fluid">
     <div class="container">
         <h1 class="display-4">Guess WHAT?</h1>
         <p class="lead">Select Single or Multiplayer!</p>
     </div>
 </div>
 <Row>
     <Col size="md-12">
         <button type="button" onClick={() => this.handleClick(1)} className="btn btn-primary btn-lg btn-block">Single</button>
         <button type="button" onClick={() => this.handleClick(2)} className="btn btn-secondary btn-lg btn-block">Multiplayer</button>
     </Col>
 </Row>


 {this.state.players ? (
     <Row>
         <Form
             value={this.state.search}
             handleInputChange={this.handleInputChange}
             handleFormSubmit={this.handleFormSubmit}
         ></Form>
     </Row>) : (
         <h2> Nothing </h2>

     )
 }
</>












const express = require('express')
const router = express.Router()
const User = require("../../Database/Models/User")
const passport = require('../../passport')

router.post('/', (req, res) => {
    console.log('user signup');
    const { username, password } = req.body
    // ADD VALIDATION
    User.findOne({ username: username }, (err, user) => {
        if (err) {
            console.log('User.js post error: ', err)
        } else if (user) {
            res.json({
                error: `Sorry, already a user with the username: ${username}`
            })
        }
        else {
            const newUser = new User({
                username: username,
                password: password
            })
            newUser.save((err, savedUser) => {
                if (err) return res.json(err)
                res.json(savedUser)
            })
        }
    })
})

router.post(
    '/login',
    function (req, res, next) {
        console.log('routes/user.js, login, req.body: ');
        console.log(req.body)
        next()
    },
    passport.authenticate('local'),
    (req, res) => {
        console.log('logged in', req.user);
        var userInfo = {
            username: req.user.username
        };
        res.send(userInfo);
    }
)

router.get('/', (req, res, next) => {
    console.log('===== user!!======')
    console.log(req.user)
    if (req.user) {
        res.json({ user: req.user })
    } else {
        res.json({ user: null })
    }
})

router.post('/logout', (req, res) => {
    if (req.user) {
        req.logout()
        res.send({ msg: 'logging out' })
    } else {
        res.send({ msg: 'no user to log out' })
    }
})

module.exports = router



<div className="SignupForm">

				<form className="form-horizontal">
					<div className="form-group">
						<div className="col-1 col-ml-auto">
							<label className="form-label" htmlFor="username">Username</label>
						</div>
						<div className="col-3 col-mr-auto">
							<input className="form-input"
								type="text"
								id="username"
								name="username"
								placeholder="Username"
								value={this.state.username}
								onChange={this.handleChange}
							/>
						</div>
					</div>
					<div className="form-group">
						<div className="col-1 col-ml-auto">
							<label className="form-label" htmlFor="password">Password: </label>
						</div>
						<div className="col-3 col-mr-auto">
							<input className="form-input"
								placeholder="password"
								type="password"
								name="password"
								value={this.state.password}
								onChange={this.handleChange}
							/>
						</div>

					</div>

					<div className="form-group ">
						<div className="col-7"></div>
						
							<button className="btn btn-primary col-1 col-mr-auto" onClick={this.handleSubmit}>Sign up</button>
						

					</div>
				</form>
			</div>