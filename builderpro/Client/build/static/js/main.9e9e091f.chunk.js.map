{"version":3,"sources":["Util/API.js","Components/Form/index.js","Components/ActionButton/index.js","Components/NavBar/index.js","Components/Wrapper/index.js","Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["datam","API","Thesaurus","query","axios","get","Dictonary","Categories","InsAdj","InsNoun","getWords","saveWord","wordData","post","Form","props","react_default","a","createElement","className","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","onClick","event","handleFormSubmit","ActionButton","NavBar","href","Wrapper","Object","assign","Home","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchWords","topics","then","res","console","log","data","fl","shortdef","date","i","length","push","word","response","preventDefault","title","state","search","catch","err","target","setState","defineProperty","choices","_this2","Components_Wrapper","Components_Form","map","topic","Components_ActionButton","key","toString","React","Component","App","react_router_dom","Components_NavBar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e9e091f.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst BASEURL = \"https://www.dictionaryapi.com/api/v3/references/thesaurus/json/\"\r\nconst BASEURL2 = \"https://www.dictionaryapi.com/api/v3/references/collegiate/json/\"\r\nconst thesKEY = \"?key=28b56967-484b-45f5-9b85-17a8fabea4ae\";\r\nconst dictKEY = \"?key=9a6569a8-75ff-478f-83c3-f71060038a88\";\r\nconst datam = \"https://api.datamuse.com/words?rel_jjb=\"\r\n\r\n\r\nexport default {\r\n    Thesaurus: function(query) {\r\n      return axios.get(BASEURL + query + thesKEY);\r\n    },\r\n    Dictonary: function(query){\r\n        return axios.get(BASEURL2 + query + dictKEY)\r\n    },\r\n    Categories: function(query){\r\n        return axios.get(datam + query )\r\n    },\r\n    InsAdj: function(query){\r\n        return axios.get(datam + query )\r\n    },\r\n    InsNoun: function(query){\r\n        return axios.get(datam + query )\r\n    },\r\n    getWords: function() {\r\n        return axios.get(\"/api/saved\");\r\n    },\r\n    saveWord: function(wordData) {\r\n        return axios.post(\"/api/words\", wordData);\r\n      }\r\n\r\n  };\r\n  \r\n","import React from \"react\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction Form(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search For a Word\"\n          id=\"search\"\n        />\n        <br />\n        <button onClick={(event) => props.handleFormSubmit(event)} className=\"btn btn-primary\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction ActionButton(props) {\n  return (\n    <button type=\"button\" className=\"btn btn-success\">Success</button>\n\n  );\n}\n\nexport default ActionButton;\n","import React from \"react\";\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        \r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n    <a className=\"navbar-brand\" href=\"/\">\r\n      Home\r\n    </a>\r\n    <a className=\"navbar-brand\" href=\"/saved\">\r\n      Random Words!\r\n    </a>\r\n  </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport API from \"../Util/API\";\nimport { Container } from \"../Components/Grid\";\nimport Form from \"../Components/Form\";\nimport datamuse from \"datamuse\";\nimport ActionButton from \"../Components/ActionButton\"\nimport NavBar from \"../Components/NavBar\";\nimport Wrapper from \"../Components/Wrapper\";\n\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      choices:[],\n      topics:[]\n    };\n  }\n  componentDidMount() {\n    this.searchWords(\"king\");\n    // this.SimilarWords(\"king\");\n  }\n\n  searchWords = (query) => {\n    let topics = [];\n\n\n    API.Thesaurus(query).then(res => console.log(\n      res.data[0],\n      res.data[0].fl,\n      res.data[0].shortdef[0],\n      res.data[0].shortdef[1]\n    ))\n    API.Dictonary(query).then(res => console.log(\n      res.data,\n      res.data[0].date,\n      res.data[0].shortdef[0],\n      res.data[0].shortdef[1]\n    ))\n    // API.Categories(this.state.search).then(res => console.log(res.data))\n    API.InsNoun(query).then((res) => {\n      for(let i = 0; i < res.data.length; i++){\n        topics.push(res.data[i].word)\n      }\n      // console.log(topics);\n    \n    });\n    API.InsAdj(query).then((response) => {\n\n\n      // console.log(response);\n    \n    \n    });;\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    // this.searchWords(this.state.search);\n    API.saveWord({\n      title: this.state.search\n    })\n    .then(console.log(\"LL\"))\n    .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n\n  render() {\n    return (\n      <Wrapper>\n  \n        <Form\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        ></Form>\n       {this.state.search.length ? (\n         this.state.topics.map(topic => (\n          <ActionButton\n          key={this.state.topics.toString()}>\n          </ActionButton>\n\n         ))\n\n       ) : (\n         <h2>Nothing</h2>\n       )}\n      \n        <ActionButton>\n        </ActionButton>\n\n      </Wrapper>\n    );\n  }\n}\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Pages/Home\";\nimport Navbar from \"./Components/NavBar\"\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        \n        </Switch>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}